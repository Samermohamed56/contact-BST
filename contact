#include <iostream>
#include<string>
#include<fstream>
#include<sstream>
using namespace std;

class person
{
    string name;
    string phone;
    person* left;
    person* right;

public:

    person(string n, string p)
    {
        this->name = n;
        this->phone = p;
        this->right = NULL;
        this->left = NULL;
    }
    person* getRight()
    {
        return right;
    }
    person* getLeft()
    {
        return left;
    }
    string getName()
    {
        return name;
    }
    string getPhone()
    {
        return phone;
    }
    void setLeft(person* l)
    {
        left = l;

    }
    void setright(person* r)
    {
        right = r;
    }
};
class binarysearshtree
{
    person* root;
    person* recInsert(person* current, string n, string p)
    {
        if (!current)
        {
            person* node = new person(n, p);
            return node;
        }
        if (n < current->getName())
        {
            current->setLeft(recInsert(current->getLeft(), n, p));
        }
        else if (n > current->getName())
        {
            current->setright(recInsert(current->getRight(), n, p));
        }
        return current;
    }
    void recPrint(person* x)
    {
        if (!x)
            return;
        
      
        recPrint(x->getLeft());
        cout << x->getName() << ":" << x->getPhone() << endl;
        recPrint(x->getRight());
    }
   
    person* recSearch(person* current, string name)
    {
        if (!current)
        {
            return NULL;
        }

        if (current->getName() == name)
        {
            return current;
        }
        else if (name < current->getName())
        {
            return recSearch(current->getLeft(), name);
        }
        else
        {
            return recSearch(current->getRight(), name);
        }
    }
    person* recRemove(person* current, string n)
    {
        if (!current)
        {
            return NULL;
        }
        if (n < current->getName())
        {
            current->setLeft(recRemove(current->getLeft(), n));
        }
        else if (n > current->getName())
        {
            current->setright(recRemove(current->getRight(), n));
        }
        else
        {
         
            if (!current->getLeft() && !current->getRight())
            {
                delete current;
                return NULL;
            }
           
            else if (!current->getLeft() || !current->getRight())
            {
                person* temp = current->getLeft() ? current->getLeft() : current->getRight();
                delete current;
                return temp;
            }
         
            else
            {
                
                person* temp = current->getRight();
                while (temp->getLeft())
                {
                    temp = temp->getLeft();
                }
                
                addNode(temp->getName(), temp->getPhone());

               
                current->setright(recRemove(current->getRight(), temp->getName()));
            }
        }
        return current;
    }
public:
    binarysearshtree()
    {
        root = NULL;
    }
    void addNode(string n, string p)
    {
        if (!root)
        {
            person* x = new person(n, p);
            root = x;
            return;
        }
        recInsert(root, n, p);
       
    }
   person* search(string n)
        {
            return recSearch(root, n);
        }
   void removeContact(string n)
   {
       if(recRemove(root,n))
       {
           root = recRemove(root, n);
       }
       else
       {
           cout << "Contact not found" << endl;
       }
      
   }
   void print()
   {
       return recPrint(root);
 }
};
int main()
{
    binarysearshtree t;
    string name, phone;
    int choice;
    person* p = NULL;

    do {
        cout << "Enter your choice:" << endl;
        cout << "1. Add a contact" << endl;
        cout << "2. Search for a contact" << endl;
        cout << "3. Remove a contact" << endl;
        cout << "4. Print all contacts" << endl;
        cout << "5. Exit" << endl;
        cin >> choice;

        switch (choice) {
        
          
        case 1:
            cout << "Enter name: ";
            cin >> name;
            cout << "Enter phone number: ";
            cin >> phone;
            t.addNode(name, phone);           
            break;
        case 2:
            cout << "Enter name to search: ";
            cin >> name;
            p = t.search(name);
            if (p) {
                cout << "Contact found: " << p->getName() << ":" << p->getPhone() << endl;
                delete p;
            }
            else {
                cout << "Contact not found" << endl;
            }
            break;
        case 3:
            cout << "Enter name to remove: ";
            cin >> name;
            t.removeContact(name);
          
            break;
        case 4:
            cout << "All contacts:" << endl;
           
            t.print(); 
            break;
        case 5:
            cout << "Exiting program..." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 5);

    return 0;
}
